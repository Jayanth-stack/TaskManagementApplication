{"ast":null,"code":"import api from './api';\nconst TaskService = {\n  getAllTasks: async programId => {\n    try {\n      const response = await api.get(`/tasks/program/${programId}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  getTaskById: async taskId => {\n    try {\n      const response = await api.get(`/tasks/${taskId}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  createTask: async taskData => {\n    try {\n      const response = await api.post('/tasks/create', taskData);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  updateTask: async (taskId, taskData) => {\n    try {\n      const response = await api.put(`/tasks/${taskId}`, taskData);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  updateTaskStatus: async (taskId, status) => {\n    try {\n      const response = await api.patch(`/tasks/${taskId}/status`, {\n        status\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  deleteTask: async taskId => {\n    try {\n      const response = await api.delete(`/tasks/${taskId}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Additional task-related methods as needed\n  getTasksByAssignee: async userId => {\n    try {\n      const response = await api.get(`/tasks/assignee/${userId}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  getTasksByStatus: async (programId, status) => {\n    try {\n      const response = await api.get(`/tasks/program/${programId}/status/${status}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\nexport default TaskService;","map":{"version":3,"names":["api","TaskService","getAllTasks","programId","response","get","data","error","getTaskById","taskId","createTask","taskData","post","updateTask","put","updateTaskStatus","status","patch","deleteTask","delete","getTasksByAssignee","userId","getTasksByStatus"],"sources":["C:/Users/jayan/Documents/TaskMangement/frontend/src/services/TaskService.js"],"sourcesContent":["import api from './api';\r\n\r\nconst TaskService = {\r\n  getAllTasks: async (programId) => {\r\n    try {\r\n      const response = await api.get(`/tasks/program/${programId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getTaskById: async (taskId) => {\r\n    try {\r\n      const response = await api.get(`/tasks/${taskId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  createTask: async (taskData) => {\r\n    try {\r\n      const response = await api.post('/tasks/create', taskData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updateTask: async (taskId, taskData) => {\r\n    try {\r\n      const response = await api.put(`/tasks/${taskId}`, taskData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updateTaskStatus: async (taskId, status) => {\r\n    try {\r\n      const response = await api.patch(`/tasks/${taskId}/status`, { status });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  deleteTask: async (taskId) => {\r\n    try {\r\n      const response = await api.delete(`/tasks/${taskId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Additional task-related methods as needed\r\n  getTasksByAssignee: async (userId) => {\r\n    try {\r\n      const response = await api.get(`/tasks/assignee/${userId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getTasksByStatus: async (programId, status) => {\r\n    try {\r\n      const response = await api.get(`/tasks/program/${programId}/status/${status}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default TaskService; "],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,MAAMC,WAAW,GAAG;EAClBC,WAAW,EAAE,MAAOC,SAAS,IAAK;IAChC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,kBAAkBF,SAAS,EAAE,CAAC;MAC7D,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAEDC,WAAW,EAAE,MAAOC,MAAM,IAAK;IAC7B,IAAI;MACF,MAAML,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,UAAUI,MAAM,EAAE,CAAC;MAClD,OAAOL,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAEDG,UAAU,EAAE,MAAOC,QAAQ,IAAK;IAC9B,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMJ,GAAG,CAACY,IAAI,CAAC,eAAe,EAAED,QAAQ,CAAC;MAC1D,OAAOP,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAEDM,UAAU,EAAE,MAAAA,CAAOJ,MAAM,EAAEE,QAAQ,KAAK;IACtC,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMJ,GAAG,CAACc,GAAG,CAAC,UAAUL,MAAM,EAAE,EAAEE,QAAQ,CAAC;MAC5D,OAAOP,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAEDQ,gBAAgB,EAAE,MAAAA,CAAON,MAAM,EAAEO,MAAM,KAAK;IAC1C,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAMJ,GAAG,CAACiB,KAAK,CAAC,UAAUR,MAAM,SAAS,EAAE;QAAEO;MAAO,CAAC,CAAC;MACvE,OAAOZ,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAEDW,UAAU,EAAE,MAAOT,MAAM,IAAK;IAC5B,IAAI;MACF,MAAML,QAAQ,GAAG,MAAMJ,GAAG,CAACmB,MAAM,CAAC,UAAUV,MAAM,EAAE,CAAC;MACrD,OAAOL,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAa,kBAAkB,EAAE,MAAOC,MAAM,IAAK;IACpC,IAAI;MACF,MAAMjB,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,mBAAmBgB,MAAM,EAAE,CAAC;MAC3D,OAAOjB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAEDe,gBAAgB,EAAE,MAAAA,CAAOnB,SAAS,EAAEa,MAAM,KAAK;IAC7C,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,kBAAkBF,SAAS,WAAWa,MAAM,EAAE,CAAC;MAC9E,OAAOZ,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF;AACF,CAAC;AAED,eAAeN,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}