{"ast":null,"code":"import api from './api';\nconst ProgramService = {\n  getAllPrograms: async () => {\n    try {\n      const response = await api.get('/getAllProgram');\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  getProgramsByAdmin: async userId => {\n    try {\n      const response = await api.get(`/getAllProgramByAdmin/${userId}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  getProgramsByUser: async userId => {\n    try {\n      const response = await api.get(`/getAllProgramByUser/${userId}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  createProgram: async (userId, programData) => {\n    try {\n      const response = await api.post(`/createProgram/${userId}`, programData);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  enterProgram: async (userId, code) => {\n    try {\n      const response = await api.get('/enterPrg', {\n        data: {\n          uid: userId,\n          code: code\n        }\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\nexport default ProgramService;","map":{"version":3,"names":["api","ProgramService","getAllPrograms","response","get","data","error","getProgramsByAdmin","userId","getProgramsByUser","createProgram","programData","post","enterProgram","code","uid"],"sources":["C:/Users/jayan/Documents/TaskMangement/frontend/src/services/ProgramService.js"],"sourcesContent":["import api from './api';\r\n\r\nconst ProgramService = {\r\n  getAllPrograms: async () => {\r\n    try {\r\n      const response = await api.get('/getAllProgram');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getProgramsByAdmin: async (userId) => {\r\n    try {\r\n      const response = await api.get(`/getAllProgramByAdmin/${userId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getProgramsByUser: async (userId) => {\r\n    try {\r\n      const response = await api.get(`/getAllProgramByUser/${userId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  createProgram: async (userId, programData) => {\r\n    try {\r\n      const response = await api.post(`/createProgram/${userId}`, programData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  enterProgram: async (userId, code) => {\r\n    try {\r\n      const response = await api.get('/enterPrg', {\r\n        data: {\r\n          uid: userId,\r\n          code: code\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default ProgramService; "],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,MAAMC,cAAc,GAAG;EACrBC,cAAc,EAAE,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,gBAAgB,CAAC;MAChD,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAEDC,kBAAkB,EAAE,MAAOC,MAAM,IAAK;IACpC,IAAI;MACF,MAAML,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,yBAAyBI,MAAM,EAAE,CAAC;MACjE,OAAOL,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAEDG,iBAAiB,EAAE,MAAOD,MAAM,IAAK;IACnC,IAAI;MACF,MAAML,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,wBAAwBI,MAAM,EAAE,CAAC;MAChE,OAAOL,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAEDI,aAAa,EAAE,MAAAA,CAAOF,MAAM,EAAEG,WAAW,KAAK;IAC5C,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMH,GAAG,CAACY,IAAI,CAAC,kBAAkBJ,MAAM,EAAE,EAAEG,WAAW,CAAC;MACxE,OAAOR,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAEDO,YAAY,EAAE,MAAAA,CAAOL,MAAM,EAAEM,IAAI,KAAK;IACpC,IAAI;MACF,MAAMX,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,WAAW,EAAE;QAC1CC,IAAI,EAAE;UACJU,GAAG,EAAEP,MAAM;UACXM,IAAI,EAAEA;QACR;MACF,CAAC,CAAC;MACF,OAAOX,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF;AACF,CAAC;AAED,eAAeL,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}